"""An endpoint to receive Mangopay's callbacks.

Doc: https://docs.mangopay.com/api-references/notifications/
"""

from datetime import timedelta
from decimal import Decimal as D

from mangopay.resources import BankWirePayOut, Document, Refund

from liberapay.billing.transactions import (
    record_exchange_result, record_payout_refund,
    repr_error,
    lock_disputed_funds, recover_lost_funds,
    check_wallet_balance,
)
from liberapay.models.participant import Participant
from liberapay.utils import utcnow

EVENT_TYPES = {
    'PAYOUT_NORMAL': BankWirePayOut,
    'PAYOUT_REFUND': Refund,
}

NOTIFICATION_TIMEOUT = timedelta(days=35)

[---]

try:
    event, status = request.qs['EventType'].rsplit('_', 1)
except ValueError:
    raise response.error(400, "bad EventType")
RessourceId = request.qs.get_int('RessourceId')

cls = EVENT_TYPES.get(event)

if event == 'KYC':
    try:
        doc = Document.get(RessourceId)
    except Document.DoesNotExist:
        raise response.error(400, "bad RessourceId: DoesNotExist")
    p = Participant.from_mangopay_user_id(doc.UserId)
    if status == 'SUCCEEDED':
        if doc.Status != 'VALIDATED':
            raise response.error(400, "status mismatch")
        raise NotImplementedError
    elif status == 'FAILED':
        if doc.Status != 'REFUSED':
            raise response.error(400, "status mismatch")
        raise NotImplementedError
    elif status == 'CREATED':
        raise response.error(400, "we don't care")
    else:
        raise response.error(400, "unknown status")

elif cls:
    # Check stuff
    try:
        payio = cls.get(RessourceId)
    except cls.DoesNotExist:
        raise response.error(400, "bad RessourceId: DoesNotExist")
    if payio.Status != status:
        raise response.error(400, "status mismatch")
    status = status.lower()
    e_id = payio.Tag
    if event == 'PAYOUT_REFUND':
        # Payout refunds are created by MangoPay and have no Tag
        e_id = record_payout_refund(website.db, payio)
    e_status = website.db.one("SELECT status FROM exchanges WHERE id = %s", (e_id,))
    if e_status == status:
        raise response.success(200, "already done")

    if payio.AuthorId == website.app_conf.mangopay_client_id:
        if event == 'PAYOUT_NORMAL' and status == 'succeeded':
            # This is the monthly fee profit payout, ignore it
            raise response.success(200, '{}')

    # Update the DB
    error = repr_error(payio)
    if event == 'PAYOUT_REFUND':
        error = payio.RefundReason.message
    p = Participant.from_mangopay_user_id(payio.AuthorId)
    was_closed = p.status == 'closed'
    affects_balance = (
        event == 'PAYOUT_NORMAL' and status == 'failed' or
        event == 'PAYOUT_REFUND' and status == 'succeeded'
    )
    reopen = was_closed and affects_balance
    if reopen:
        p.update_status('active')
    assert e_id
    record_exchange_result(website.db, e_id, payio.Id, status, error, p)
    e = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e_id,))

    # Attempt to transfer the money to the user's current wallet
    current_wallet_id = getattr(p.get_current_wallet(e.amount.currency), 'remote_id', None)
    if affects_balance and e.wallet_id != current_wallet_id:
        w = Wallet.get(e.wallet_id)
        balance = w.Balance
        if balance:
            transfer(
                website.db, p.id, p.id, balance, 'account-switch',
                tipper_mango_id=w.Owners[0].Id, tipper_wallet_id=w.Id,
                tippee_mango_id=p.mangopay_user_id, tippee_wallet_id=current_wallet_id,
            )

    # Notify the user
    if event == 'PAYOUT_NORMAL' and status != 'succeeded':
        p.notify('withdrawal_'+status, exchange=e._asdict(), force_email=True)
    elif event == 'PAYOUT_REFUND' and status == 'succeeded':
        d = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e.refund_ref,))._asdict()
        d['note'] = e.note
        p.notify('withdrawal_failed', exchange=d, force_email=True)

    # Check balances
    check_wallet_balance(website.db.one(
        "SELECT * FROM wallets WHERE remote_id = %s", (current_wallet_id,)
    ))

else:
    raise response.error(400, "unknown event type")

[---] text/plain

[---] application/json
{}
