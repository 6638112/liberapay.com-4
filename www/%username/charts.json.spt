"""Return an array of objects with interesting data for the user.

We want one object per payday, but the user probably didn't participate in
every payday. Our solution is to fetch all of the user's transfers and all of
the paydays since the user joined, and then loop through transfers and aggregate
into the relevant payday object.

If the user has never received, we return an empty array. Client code can take
this to mean, "no chart."

"""

from liberapay.i18n.currencies import Money
from liberapay.utils import get_participant

[---]

participant = get_participant(state, restrict=False)

if participant.hide_receiving:
    if user != participant and not user.is_admin:
        raise response.error(403)

response.headers[b"Access-Control-Allow-Origin"] = b"*"

# Fetch data from the database

paydays = website.db.all("""
      SELECT p.ts_end, p.ts_start::date AS date
        FROM paydays p
       WHERE stage IS NULL
         AND ts_start > %s
    ORDER BY ts_end ASC
""", (participant.join_time,), back_as=dict)

if not paydays:
    raise response.json([])

col = 'team' if participant.kind == 'group' else 'tippee'

transfers = website.db.all("""
   SELECT timestamp
        , amount
        , tipper
     FROM transfers t
    WHERE t.{0} = %s
      AND status = 'succeeded'
      AND t.timestamp < %s
      AND t.context IN ('tip', 'take', 'partial-take')
 ORDER BY id ASC
""".format(col), (participant.id, paydays[-1]['ts_end']), back_as=dict)

if not transfers:
    raise response.json([])

currency = participant.main_currency
zero = Money.ZEROS[currency]
paydays_i = iter(paydays)
ts_end = constants.EPOCH
patrons = set()

# Loop through transfers, advancing payday cursor as appropriate
for transfer in transfers:
    while transfer['timestamp'] >= ts_end:
        curpayday = next(paydays_i)
        curpayday['npatrons'] = 0
        curpayday['receipts'] = zero
        ts_end = curpayday.pop('ts_end')
        patrons.clear()
    if transfer['timestamp'] >= ts_end:
        break

    tipper = transfer['tipper']
    if tipper not in patrons:
        curpayday['npatrons'] += 1
        patrons.add(tipper)
    curpayday['receipts'] += transfer['amount'].convert(currency)

paydays.reverse()

[---] application/json via json_dump
paydays
