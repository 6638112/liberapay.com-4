from pando import json

from liberapay.exceptions import LazyResponse
from liberapay.utils import get_participant

[-----------------------]
participant = get_participant(state, restrict=True)
if user != participant:
    raise response.error(403) # disallow admins

if request.method == 'POST':
    out = []
    try:
        new_tips = json.loads(request.body_bytes)
    except Exception as e:
        raise response.error(400, str(e))
    if not isinstance(new_tips, list):
        raise response.error(400, "the payload must be a list")
    for tip in new_tips:
        one = {}
        out.append(one)
        if not isinstance(tip, dict):
            one['error'] = "items must be objects"
            continue
        currency = tip.get('currency', 'EUR')
        if currency not in constants.CURRENCIES:
            one['error'] = f"currency code {currency!r} isn't supported"
            continue
        try:
            one['username'] = tip['username']
            amount = locale.parse_money_amount(tip['amount'], currency)
            one['amount'] = participant.set_tip_to(
                tip['username'], amount, tip['period'],
            )['amount']
        except KeyError as e:
            one['error'] = f"missing key {e.args[0]!r}"
        except LazyResponse as r:
            one['error'] = r.render_body(state)

else:
    tips, pledges = participant.get_giving_details()
    out = []
    for tip in tips:
        if tip.renewal_mode <= 0:
            continue
        tippee = tip.tippee_p
        out.append({
            "tippee": {
                "id": tippee.id,
                "username": tippee.username,
                "kind": tippee.kind,
                "status": "active",
            },
            "amount": tip.amount,
            "period": tip.period,
            "periodic_amount": tip.periodic_amount,
            "ctime": tip.ctime,
            "mtime": tip.mtime,
        })
    for tip in pledges:
        if tip.renewal_mode <= 0:
            continue
        e = tip.e_account
        tippee = e.participant
        out.append({
            "tippee": {
                "id": tippee.id,
                "elsewhere": {
                    "platform": e.platform,
                    "user_id": e.user_id,
                    "user_name": e.user_name,
                    "display_name": e.display_name,
                },
                "status": "stub",
            },
            "amount": tip.amount,
            "period": tip.period,
            "periodic_amount": tip.periodic_amount,
            "ctime": tip.ctime,
            "mtime": tip.mtime,
        })

[---] application/json via json_dump
out
